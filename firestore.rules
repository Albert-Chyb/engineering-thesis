rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId}/tests/{testId} {
      allow read, delete: if 
        isLoggedIn() && 
        isAuthenticatedUser(userId);

      allow update: if 
        isLoggedIn() &&
        isAuthenticatedUser(userId) && 
        schemaCreatorTest() &&
        updatableKeys(['name']);

      allow create: if 
        isLoggedIn() &&
        isAuthenticatedUser(userId) && 
        schemaCreatorTest();
    }

    match /users/{userId}/tests/{testId}/questions/{questionId} {
      allow read, delete: if 
        isLoggedIn() && 
        isAuthenticatedUser(userId);

      allow update: if
        isLoggedIn() &&
        isAuthenticatedUser(userId) &&
        schemaCreatorQuestion(testId) &&
        updatableKeys(['content', 'position']);

      allow create: if 
        isLoggedIn() &&
        isAuthenticatedUser(userId) &&
        schemaCreatorQuestion(testId);
    }

    match /users/{userId}/tests/{testId}/questions/{questionId}/answers/{answerId} {
      allow read, delete: if 
        isLoggedIn() && 
        isAuthenticatedUser(userId);

      allow update: if
        isLoggedIn() &&
        isAuthenticatedUser(userId) &&
        schemaCreatorAnswer(testId, questionId) &&
        updatableKeys(['content', 'position']);

      allow create: if 
        isLoggedIn() &&
        isAuthenticatedUser(userId) && 
        get(/databases/$(database)/documents/users/$(userId)/tests/$(testId)/questions/$(questionId)).data.type in getClosedQuestionsTypes() &&
        schemaCreatorAnswer(testId, questionId);
    }

    match /shared-tests/{testId} {
      allow read: if isLoggedIn();

      allow delete: if 
        isLoggedIn() &&
        isAuthenticatedUser(resource.data.author);

      allow create, update: if false;
    }

    match /shared-tests-metadata/{metadataId} {
      allow read: if isLoggedIn();

      allow delete: if 
        isLoggedIn() &&
        isAuthenticatedUser(resource.data.author);

      allow create, update: if false;
    }

    match /shared-tests/{sharedTestId}/solved-tests/{solvedTestId} {        
      allow update, create: if false;

      // Allow the test taker to read his solved test
      allow read: if 
        isLoggedIn() &&
        isAuthenticatedUser(request.resource.data.testTakerId);

      allow read, delete: if
        isLoggedIn() &&
        isAuthenticatedUser(
          get(/databases/$(database)/documents/shared-tests-metadata/$(sharedTestId)).data.author
        );
    }

    match /shared-tests/{sharedTestId}/solved-tests-answers/{solvedTestId} {
      allow update, create: if false;

      // Allow the test taker to read his solved test answers
      allow read: if 
        isLoggedIn() &&
        isAuthenticatedUser(
          get(/databases/$(database)/documents/shared-tests/$(sharedTestId)/solved-tests/$(solvedTestId)).data.testTakerId
        );

      allow read, delete: if
        isLoggedIn() &&
        isAuthenticatedUser(
          get(/databases/$(database)/documents/shared-tests-metadata/$(sharedTestId)).data.author
        );
    }

    match /answers-keys/{sharedTestId} {
      allow update, create: if false;

      allow read, delete: if
        isLoggedIn() &&
        isAuthenticatedUser(
          get(/databases/$(database)/documents/shared-tests-metadata/$(sharedTestId)).data.author
        );
    }

    match /{path=**}/solved-tests/{solvedTestId} {
      allow write: if false;

      // Allow the test taker to read tests solved by him in a group collection query
      allow read: if 
        isLoggedIn() &&
        isAuthenticatedUser(resource.data.testTakerId);
    }
  }
}

function updatableKeys(keys) {
  return request.resource.data.diff(resource.data).affectedKeys().hasOnly(keys);
}

function isLoggedIn() {
  return request.auth != null;
}

function isAuthenticatedUser(userId) {
  return request.auth.uid == userId;
}

function schemaCreatorTest() {
  let allowedFields = ['name'];

  return 
    request.resource.data.keys().hasOnly(allowedFields) &&
    request.resource.data.name is string;
}

function getQuestionsTypes() {
  return ['single-choice', 'multi-choice', 'text-answer'];
}

function getClosedQuestionsTypes() {
  return ['single-choice', 'multi-choice'];
}


function schemaCreatorQuestion(testId) {
  let allowedFields = ['content', 'type', 'position', 'testId'];

  return 
    request.resource.data.keys().hasOnly(allowedFields) &&

    request.resource.data.content is string &&

    request.resource.data.type is string &&
    request.resource.data.type in getQuestionsTypes() &&

    request.resource.data.position is int &&
    request.resource.data.position > 0 &&
    
    request.resource.data.testId is string &&
    request.resource.data.testId == testId;
}

function schemaCreatorAnswer(testId, questionId) {
  return schemaCreateAnswerCheckable(testId, questionId);
}

function schemaCreateAnswerCheckable(testId, questionId) {
  return 
    schemaCreatorAnswerBase(testId, questionId, 'checkable', ['isChecked']) && 

    request.resource.data.isChecked is bool;
}

function schemaCreatorAnswerBase(testId, questionId, type, additionalFields) {
  let allowedFields = ['content', 'position', 'questionId', 'testId', 'type'].toSet().union(additionalFields.toSet());

  return 
    request.resource.data.keys().hasOnly(allowedFields) &&

    request.resource.data.content is string &&

    request.resource.data.position is int &&
    request.resource.data.position > 0 &&
    
    request.resource.data.testId is string &&
    request.resource.data.testId == testId &&

    request.resource.data.questionId is string &&
    request.resource.data.questionId == questionId &&
    
    request.resource.data.type is string &&
    request.resource.data.type == type;
}